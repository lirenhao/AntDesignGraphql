scalar Date

type  partyRelationship  {
    partyIdFrom: ID! #源当事人
    partyIdTo :String #目的当事人
    roleTypeIdFrom :String #源当事人角色类型标记
    roleTypeIdTo :String #目标当事人角色类型标记
    fromDate:Date #起始日期
    thruDate:Date #终止日期
    statusId :String #状态标识
    relationshipName :String #关系名称
    securityGroupId :String #安全组标识
    priorityTypeId :String #优先级类型标识
    partyRelationshipTypeId :String #当事人关系类型标识
    permissionsEnumId :String
    comments :String #注释
    positionTitle :String
    lastUpdatedStamp:Datet
    createdStamp:Date
    version:int
}
type Query {
    countByExample(example:partyRelationshipExample):Long
    selectByExample(example:partyRelationshipExample):[partyRelationship]
    selectByPrimaryKey(key:partyRelationshipKey):partyRelationship
}
type Mutation{
    insert(record:partyRelationship): Int
    insertSelective(record:partyRelationship): Int
    updateByPrimaryKey(record:partyRelationship): Int
    deleteByPrimaryKey(key:partyRelationshipKey):Int
}
type partyRelationshipExample{
    orderByClause:String
    distinct:Boolean
    oredCriteria:[Criteria]
}
type partyRelationshipKey{
    partyIdFrom:String
    partyIdTo:String
    roleTypeIdFrom:String
    roleTypeIdTo:String
    fromDate:Date
}